---
variables:
  EXTERNAL_REGISTRY: "docker.software-univention.de"

include:
  - project: "univention/customers/dataport/upx/common-ci"
    ref: "v1.0.0"
    file:
      - "jobs/sphinx-docs.yaml"
      - "defaults/stages.yaml"
      - "defaults/souvap-workflow.yaml"
      - "templates/semantic-release-env.yaml"
      - "templates/container-generate-sbom-syft.yaml"
      - "templates/container-sign-cosign.yaml"
      - "templates/container-security-scan-trivy.yaml"
      - "templates/kaniko.yaml"
      - "templates/souvap.yaml"
      - "jobs/lint-commit-messages.yaml"
      - "jobs/lint-pre-commit.yaml"

pre-semantic-release:
  extends: ".pre-semantic-release"

.kaniko_no_sock:
  extends: .kaniko
  before_script:
    # The GitLab runner mounts the Docker socket into /var/run.
    # Kaniko either ignores /var/run (default), or the socket ends up in the tarball.
    # We unmount the socket here, and later use `--ignore-var-run=false` to have a
    # regular /var/run directory in the final image.
    - "umount /var/run/docker.sock"
    - "rm -rf /var/run"

build-ucs-base:
  stage: build
  extends: .kaniko_no_sock
  needs:
    - job: "pre-semantic-release"
      artifacts: true
  parallel:
    matrix:
      - IMAGE_BASENAME: "ucs-base"
        UCS_VERSION:
          - 500
          - 501
          - 502
          - 503
          - 504
          - 505
        APT_REPOSITORY: "http://updates.software-univention.de/"
        TARGET: "final"
      - IMAGE_BASENAME: "ucs-base"
        UCS_VERSION:
          - 510
        APT_REPOSITORY: "http://updates-test.software-univention.de/"
        TARGET: "final"
      - IMAGE_BASENAME: "ucs-base"
        UCS_VERSION:
          - 520
        APT_REPOSITORY: "http://updates-test.software-univention.de/"
        TARGET: "final"
        DOCKERFILE_PATH: "usr-merge.Dockerfile"
      - IMAGE_BASENAME: "ucs-base-dev"
        UCS_VERSION:
          - 500
          - 501
          - 502
          - 503
          - 504
          - 505
        APT_REPOSITORY: "http://updates.software-univention.de/"
        TARGET: "dev"
      - IMAGE_BASENAME: "ucs-base-dev"
        UCS_VERSION:
          - 510
        APT_REPOSITORY: "http://updates-test.software-univention.de/"
        TARGET: "dev"
      - IMAGE_BASENAME: "ucs-base-dev"
        UCS_VERSION:
          - 520
        APT_REPOSITORY: "http://updates-test.software-univention.de/"
        TARGET: "dev"
        DOCKERFILE_PATH: "usr-merge.Dockerfile"
  variables:
    KANIKO_BUILD_CONTEXT: "docker"
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/${IMAGE_BASENAME}-${UCS_VERSION}"
    VERSION: "${RELEASE_VERSION}"
    DIGEST_PREFIX: "digest-${IMAGE_BASENAME}-${UCS_VERSION}-${RELEASE_VERSION}"
    KANIKO_ARGS: --ignore-var-run=false
      --build-arg UCS_VERSION=${UCS_VERSION}
      --build-arg APT_REPOSITORY=${APT_REPOSITORY}
      --target ${TARGET}

test-ucs-base-usage-example:
  stage: test
  extends: .kaniko_no_sock
  cache: null
  needs:
    - job: "pre-semantic-release"
      artifacts: true
    - job: build-ucs-base
      artifacts: true
  parallel:
    matrix:
      - IMAGE_BASENAME: "ucs-base"
        DOCKERFILE_PATH: "docker/Dockerfile.usage-example"
        UCS_VERSION:
          - 500
          - 501
          - 502
          - 503
          - 504
          - 505
          - 510
          - 520
      - IMAGE_BASENAME: "ucs-base-dev"
        DOCKERFILE_PATH: "docker/dev.Dockerfile.usage-example"
        UCS_VERSION:
          - 500
          - 501
          - 502
          - 503
          - 504
          - 505
          - 510
          - 520
  variables:
    KANIKO_BUILD_CONTEXT: "docker"
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/${IMAGE_BASENAME}-${UCS_VERSION}-usage-example"
    KANIKO_CACHE_ARGS: ""
    KANIKO_ARGS: --no-push
      --build-arg UCS_BASE_IMAGE_TAG=${BUILD_VERSION}
      --build-arg UCS_VERSION=${UCS_VERSION}

container-generate-sbom:
  stage: publish
  extends: .container-generate-sbom
  needs:
    - job: "pre-semantic-release"
      artifacts: true
    - job: "test-ucs-base-usage-example"
      artifacts: false
  parallel:
    matrix:
      - IMAGE_BASENAME:
          - "ucs-base"
        UCS_VERSION:
          - 500
          - 501
          - 502
          - 503
          - 504
          - 505
          - 510
          - 520
  variables:
    DIGEST_PREFIX: "digest-${IMAGE_BASENAME}-${UCS_VERSION}-${RELEASE_VERSION}"
    SBOM_PREFIX: "sbom-${IMAGE_BASENAME}-${UCS_VERSION}-${RELEASE_VERSION}"
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/${IMAGE_BASENAME}-${UCS_VERSION}"

container-sign:
  stage: publish
  extends: .container-sign
  needs:
    - job: "pre-semantic-release"
      artifacts: true
    - job: "container-generate-sbom"
      artifacts: true
  parallel:
    matrix:
      - IMAGE_BASENAME:
          - "ucs-base"
        UCS_VERSION:
          - 500
          - 501
          - 502
          - 503
          - 504
          - 505
          - 510
          - 520
  variables:
    DIGEST_PREFIX: "digest-${IMAGE_BASENAME}-${UCS_VERSION}-${RELEASE_VERSION}"
    SBOM_PREFIX: "sbom-${IMAGE_BASENAME}-${UCS_VERSION}-${RELEASE_VERSION}"
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/${IMAGE_BASENAME}-${UCS_VERSION}"

container-security-scan:
  stage: publish
  extends: .container-security-scan
  needs:
    - job: "pre-semantic-release"
      artifacts: true
    - job: "test-ucs-base-usage-example"
      artifacts: false
  parallel:
    matrix:
      - IMAGE_BASENAME:
          - "ucs-base"
        UCS_VERSION:
          - 500
          - 501
          - 502
          - 503
          - 504
          - 505
          - 510
          - 520
  variables:
    DIGEST_PREFIX: "digest-${IMAGE_BASENAME}-${UCS_VERSION}-${RELEASE_VERSION}"
    CODEQUALITY_REPORT_PREFIX: "gl-code-quality-report-${IMAGE_BASENAME}-${UCS_VERSION}-${RELEASE_VERSION}"
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/${IMAGE_BASENAME}-${UCS_VERSION}"

post-semantic-release:
  extends: ".post-semantic-release"

mirror-release:
  stage: publish
  image: "gitregistry.knut.univention.de/univention/customers/dataport/upx/common-ci/semantic-release-patched:0.11.0"
  needs:
    - job: "pre-semantic-release"
      artifacts: true
    - job: "test-ucs-base-usage-example"
      artifacts: false
  parallel:
    matrix:
      - UCS_VERSION:
          - 505
          - 520
  script:
    - |
      set -eu
      # check if RELEASE_VERSION is a release version, not a pre-release version
      MATCH="^[0-9]+\.[0-9]+\.[0-9]+$";
      if [[ "${RELEASE_VERSION}" =~ ${MATCH} ]]; then
        echo "Release version '${RELEASE_VERSION}' detected, mirroring '$CI_REGISTRY_IMAGE/ucs-base-$UCS_VERSION:$RELEASE_VERSION' to '$PUBLIC_DOCKER_REGISTRY/ucs-base-$UCS_VERSION:$RELEASE_VERSION'"
      else
        echo "No valid release version detected (RELEASE_VERSION is '${RELEASE_VERSION}'), skipping mirroring"
        exit 0
      fi
      chmod 0400 "${DOCKER_PROXY_MACHINE_SSH_KEY}"
      export SSH_CMD="ssh -i ${DOCKER_PROXY_MACHINE_SSH_KEY} -o UserKnownHostsFile=\"${DOCKER_PROXY_MACHINE_SSH_PUBLIC_KEY}\""
      ${SSH_CMD} "${DOCKER_PROXY_USER}"@"${DOCKER_PROXY_MACHINE}" sudo /usr/bin/docker \
        pull \
        "${CI_REGISTRY_IMAGE}/ucs-base-${UCS_VERSION}:${RELEASE_VERSION}"
      ${SSH_CMD} "${DOCKER_PROXY_USER}"@"${DOCKER_PROXY_MACHINE}" sudo /usr/bin/docker \
        tag \
        "${CI_REGISTRY_IMAGE}/ucs-base-${UCS_VERSION}:${RELEASE_VERSION}" \
        "${PUBLIC_DOCKER_REGISTRY}/ucs-base-${UCS_VERSION}:${RELEASE_VERSION}"
      ${SSH_CMD} "${DOCKER_PROXY_USER}"@"${DOCKER_PROXY_MACHINE}" sudo /usr/bin/docker \
        push \
        "${PUBLIC_DOCKER_REGISTRY}/ucs-base-${UCS_VERSION}:${RELEASE_VERSION}"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
...
