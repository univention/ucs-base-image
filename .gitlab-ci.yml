---

# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2023 Univention GmbH

include:
  - project: "univention/customers/dataport/upx/common-ci"
    ref: "v1.20.1"
    file:
      - "jobs/sphinx-docs.yaml"
      - "defaults/stages.yaml"
      - "defaults/souvap-workflow.yaml"
      - "templates/kaniko.yaml"
      - "templates/souvap.yaml"
      - "jobs/semantic-release-env.yaml"
      - "jobs/container-build.yaml"
      - "jobs/lint-commit-messages.yaml"
      - "jobs/lint-pre-commit.yaml"
      - "jobs/check-debian-updates.yaml"

variables:
  EXTERNAL_REGISTRY: "docker.software-univention.de"

.post-build-matrix: &post-build-matrix
  - IMAGE_BASENAME:
      - "ucs-base"
    UCS_VERSION:
      - 505
      - 506
      - 510
      - 520

container-build:
  # The GitLab runner mounts the Docker socket into /var/run.
  # Kaniko either ignores /var/run (default), or the socket ends up in the tarball.
  # We unmount the socket here, and later use `--ignore-var-run=false` to have a
  # regular /var/run directory in the final image.
  before_script:
    - "umount /var/run/docker.sock"
    - "rm -rf /var/run"
  parallel:
    matrix:
      - IMAGE_BASENAME: "ucs-base"
        UCS_VERSION:
          - 505
          - 506
        APT_REPOSITORY: "http://updates.software-univention.de/"
        TARGET: "final"
      - IMAGE_BASENAME: "ucs-base"
        UCS_VERSION:
          - 510
        APT_REPOSITORY: "http://updates-test.software-univention.de/"
        TARGET: "final"
      - IMAGE_BASENAME: "ucs-base"
        UCS_VERSION:
          - 520
        APT_REPOSITORY: "http://updates-test.software-univention.de/"
        TARGET: "final"
        DOCKERFILE_PATH: "usr-merge.Dockerfile"
      - IMAGE_BASENAME: "ucs-base-dev"
        UCS_VERSION:
          - 505
          - 506
        APT_REPOSITORY: "http://updates.software-univention.de/"
        TARGET: "dev"
      - IMAGE_BASENAME: "ucs-base-dev"
        UCS_VERSION:
          - 510
        APT_REPOSITORY: "http://updates-test.software-univention.de/"
        TARGET: "dev"
      - IMAGE_BASENAME: "ucs-base-dev"
        UCS_VERSION:
          - 520
        APT_REPOSITORY: "http://updates-test.software-univention.de/"
        TARGET: "dev"
        DOCKERFILE_PATH: "usr-merge.Dockerfile"
  variables:
    KANIKO_BUILD_CONTEXT: "docker/ucs-base"
    IMAGE_NAME: "${IMAGE_BASENAME}-${UCS_VERSION}"
    KANIKO_ARGS: --ignore-var-run=false
      --build-arg UCS_VERSION=${UCS_VERSION}
      --build-arg APT_REPOSITORY=${APT_REPOSITORY}
      --target ${TARGET}

test-ucs-base-usage-example:
  stage: "test"
  extends: ".kaniko"
  cache: null
  parallel:
    matrix:
      - IMAGE_BASENAME: "ucs-base"
        DOCKERFILE_PATH: "Dockerfile.usage-example"
        UCS_VERSION:
          - 505
          - 506
          - 510
          - 520
      - IMAGE_BASENAME: "ucs-base-dev"
        DOCKERFILE_PATH: "dev.Dockerfile.usage-example"
        UCS_VERSION:
          - 505
          - 506
          - 510
          - 520
  variables:
    KANIKO_BUILD_CONTEXT: "docker/ucs-base"
    IMAGE_NAME: "${IMAGE_BASENAME}-${UCS_VERSION}"
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/${IMAGE_BASENAME}-${UCS_VERSION}-usage-example"
    KANIKO_CACHE_ARGS: ""
    KANIKO_ARGS: --no-push
      --build-arg UCS_BASE_IMAGE_TAG=${RELEASE_VERSION}
      --build-arg UCS_VERSION=${UCS_VERSION}

container-generate-sbom:
  parallel:
    matrix: *post-build-matrix
  variables:
    IMAGE_NAME: "${IMAGE_BASENAME}-${UCS_VERSION}"

container-sign:
  parallel:
    matrix: *post-build-matrix
  variables:
    IMAGE_NAME: "${IMAGE_BASENAME}-${UCS_VERSION}"

container-security-scan:
  parallel:
    matrix: *post-build-matrix
  variables:
    IMAGE_NAME: "${IMAGE_BASENAME}-${UCS_VERSION}"

mirror-release:
  stage: "publish"
  image: "${RUNNER_REGISTRY_IMAGE}:${RUNNER_IMAGE_TAG}"
  variables:
    RUNNER_REGISTRY_IMAGE: "gitregistry.knut.univention.de/univention/dist/ci-images/gitlab-utils/gitlab-utils"
    RUNNER_IMAGE_TAG: "1.19.1@sha256:11fdcf823f7e17e00e8434a094093297c5dd0b7bc4cbe93ef100b12b21e81ab6"
  parallel:
    matrix:
      - UCS_VERSION:
          - 506
          - 520
  script:
    - |
      set -eu
      # check if RELEASE_VERSION is a release version, not a pre-release version
      MATCH="^[0-9]+\.[0-9]+\.[0-9]+$";
      if [[ "${RELEASE_VERSION}" =~ ${MATCH} ]]; then
        echo "Release version '${RELEASE_VERSION}' detected, mirroring '$CI_REGISTRY_IMAGE/ucs-base-$UCS_VERSION:$RELEASE_VERSION' to '$PUBLIC_DOCKER_REGISTRY/ucs-base-$UCS_VERSION:$RELEASE_VERSION'"
      else
        echo "No valid release version detected (RELEASE_VERSION is '${RELEASE_VERSION}'), skipping mirroring"
        exit 0
      fi
      chmod 0400 "${DOCKER_PROXY_MACHINE_SSH_KEY}"
      export SSH_CMD="ssh -i ${DOCKER_PROXY_MACHINE_SSH_KEY} -o UserKnownHostsFile=\"${DOCKER_PROXY_MACHINE_SSH_PUBLIC_KEY}\""
      ${SSH_CMD} "${DOCKER_PROXY_USER}"@"${DOCKER_PROXY_MACHINE}" sudo /usr/bin/docker \
        pull \
        "${CI_REGISTRY_IMAGE}/ucs-base-${UCS_VERSION}:${RELEASE_VERSION}"
      ${SSH_CMD} "${DOCKER_PROXY_USER}"@"${DOCKER_PROXY_MACHINE}" sudo /usr/bin/docker \
        tag \
        "${CI_REGISTRY_IMAGE}/ucs-base-${UCS_VERSION}:${RELEASE_VERSION}" \
        "${PUBLIC_DOCKER_REGISTRY}/ucs-base-${UCS_VERSION}:${RELEASE_VERSION}"
      ${SSH_CMD} "${DOCKER_PROXY_USER}"@"${DOCKER_PROXY_MACHINE}" sudo /usr/bin/docker \
        push \
        "${PUBLIC_DOCKER_REGISTRY}/ucs-base-${UCS_VERSION}:${RELEASE_VERSION}"
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"

check-debian-updates:
  parallel:
    matrix: *post-build-matrix
  variables:
    TARGET_IMAGE: "${CI_REGISTRY_IMAGE}/${IMAGE_BASENAME}-${UCS_VERSION}:latest"

...
